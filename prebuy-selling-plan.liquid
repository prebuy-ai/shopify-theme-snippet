{% comment %}
  Prebuy Selling Plan Integration with Shopify Markets Support (Location-based Structure)
  
  Usage: Add this line to your product form (after the variant ID input):
  {% render 'prebuy-selling-plan', product: product %}
  
  For product page text, add this after your buttons:
  {% render 'prebuy-selling-plan', product: product, show_text: true %}
  
  To enable preorder button text (changes "Add to Cart" to "Preorder Now"):
  {% render 'prebuy-selling-plan', product: product, show_button_text: true %}
  
  To hide accelerated checkout buttons for preorder variants:
  {% render 'prebuy-selling-plan', product: product, hide_accelerated_checkout: true %}
  
  To get the preorder status as a variable, use:
  {% render 'prebuy-selling-plan', product: product, return_preorder_status: true %}
  
  This snippet automatically handles:
  - Multiple campaigns per variant (location-based metafield structure)
  - Shopify Markets compatibility with location matching
  - Dynamic updates when variants change
  - Product page text display (if show_text: true)
  - Works with any theme without modification
  
  Markets Support:
  - Variant metafield supports array of campaigns: [{ locationId: "location_id", sellingPlanId: "...", productPageText: "..." }]
  - Uses shop.metafields.prebuy.markets for market-to-location mapping: [{ id: "market_id", locationPriorities: [{ locationId: "location_id", priority: 1, label: "locationKey" }] }]
  - Matches campaigns by finding locationId in current market's locationPriorities array
  - When multiple campaigns match, selects the one with lowest priority number (1 = highest priority)
  - Market IDs should be numeric format (e.g., "93117382984")
{% endcomment %}

{%- liquid
  if variant
    assign current_variant = variant
  else
    assign current_variant = product.selected_or_first_available_variant
  endif
  assign prebuy_campaigns = current_variant.metafields.prebuy.campaigns.value
  assign prebuy_markets = shop.metafields.prebuy.markets.value
  assign current_market_id = localization.market.id
  assign current_market_numeric = current_market_id | split: '/' | last
  
  # Markets compatibility check
  assign is_market_compatible = false
  assign selling_plan_id = ''
  assign product_page_text = ''
  assign selected_campaign = null
  
  # Find current market configuration
  assign current_market_config = null
  if prebuy_markets and prebuy_markets.size > 0
    for market_config in prebuy_markets
      assign market_id_str = market_config.id | append: ''
      assign current_market_str = current_market_numeric | append: ''
      
      if market_id_str == current_market_str
        assign current_market_config = market_config
        break
      endif
    endfor
  endif
  
  if prebuy_campaigns and prebuy_campaigns.size > 0 and current_market_config
    # Find best compatible campaign for current market by matching locationId with priority
    assign best_priority = 999999
    
    for campaign in prebuy_campaigns
      if campaign.locationId
        assign campaign_compatible = false
        assign campaign_priority = 999999
        
        # Check if campaign's locationId matches any location in current market's locationPriorities
        if current_market_config.locationPriorities
          for location_priority in current_market_config.locationPriorities
            assign location_id_str = location_priority.locationId | append: ''
            assign campaign_location_str = campaign.locationId | append: ''
            
            if location_id_str == campaign_location_str
              assign campaign_compatible = true
              assign campaign_priority = location_priority.priority | default: 999999
              break
            endif
          endfor
        endif
        
        # Select this campaign if it's compatible and has better priority
        if campaign_compatible and campaign_priority < best_priority
          assign selected_campaign = campaign
          assign is_market_compatible = true
          assign selling_plan_id = campaign.sellingPlanId | split: '/' | last
          assign product_page_text = campaign.productPageText
          assign best_priority = campaign_priority
        endif
      endif
    endfor
  endif
  
  # Output preorder status if requested
  if return_preorder_status
    echo is_market_compatible
  endif
  
  # Handle button text updates if requested
  if show_button_text
    assign enable_button_text_updates = true
  endif
  
  # Handle accelerated checkout hiding if requested
  if hide_accelerated_checkout
    assign enable_accelerated_checkout_control = true
  endif
-%}

{%- if enable_button_text_updates or enable_accelerated_checkout_control -%}
<script>
{%- if enable_button_text_updates -%}window.prebuyEnableButtonTextUpdates = true;{%- endif -%}
{%- if enable_accelerated_checkout_control -%}window.prebuyEnableAcceleratedCheckoutControl = true;{%- endif -%}

// Update button text on page load
document.addEventListener('DOMContentLoaded', function() {
  const buyButtons = document.querySelectorAll('.product-form__submit, button[name="add"], .pdp-info__add-to-cart');
  const isPreorder = {{ is_market_compatible | json }};
  
  buyButtons.forEach(button => {
    const buttonTextSpan = button.querySelector('span');
    if (!buttonTextSpan || button.disabled) return;
    
    // Store original text
    if (!button.dataset.originalText) {
      const currentText = buttonTextSpan.textContent.trim();
      if (!currentText.includes('Preorder') && !currentText.includes('Translation missing')) {
        button.dataset.originalText = currentText;
      } else {
        button.dataset.originalText = 'Add to cart';
      }
    }
    
    // Update text based on preorder status
    if (isPreorder) {
      buttonTextSpan.textContent = 'Preorder Now';
    }
  });
  
  // Handle accelerated checkout visibility (only if enabled)
  if (window.prebuyEnableAcceleratedCheckoutControl) {
    const acceleratedCheckoutButtons = document.querySelectorAll('.shopify-payment-button, [data-shopify="payment-button"], .dynamic-checkout__content, .payment-button');
    if (isPreorder) {
      acceleratedCheckoutButtons.forEach(button => {
        button.style.display = 'none';
        button.setAttribute('data-prebuy-hidden', 'true');
      });
    } else {
      acceleratedCheckoutButtons.forEach(button => {
        if (button.getAttribute('data-prebuy-hidden') === 'true') {
          button.style.display = '';
          button.removeAttribute('data-prebuy-hidden');
        }
      });
    }
  }
});
</script>
{%- endif -%}

{%- unless show_text or return_preorder_status -%}
  <input
    type="hidden"
    name="selling_plan"
    value="{{ selling_plan_id }}"
    class="prebuy-selling-plan"
    data-prebuy-enabled="{{ is_market_compatible | default: false }}"
    data-market-id="{{ current_market_id }}"
    data-market-compatible="{{ is_market_compatible }}"
    data-is-preorder="{{ is_market_compatible }}"
    {% unless is_market_compatible and selling_plan_id %}disabled{% endunless %}
  >
  
  <input
    type="hidden"
    name="properties[_Location ID]"
    value="{{ selected_campaign.locationId }}"
    class="prebuy-location-property"
    {% unless is_market_compatible and selected_campaign.locationId %}disabled{% endunless %}
  >
{%- endunless -%}

{%- if show_text -%}
  <div class="prebuy-product-text" style="margin-top: 10px;{% unless is_market_compatible and product_page_text %} display: none;{% endunless %}">
    <p class="prebuy-text">{{ product_page_text }}</p>
  </div>
{%- endif -%}

{%- unless return_preorder_status -%}
{%- comment -%} Variant data for JavaScript (Markets-aware with campaigns array) {%- endcomment -%}
<script type="application/json" class="prebuy-variant-data">
{
  "currentMarketId": {{ current_market_id | json }},
  "currentMarketNumeric": {{ current_market_numeric | json }},
  "marketPriorities": {{ prebuy_markets | json }},
  "variants": {
    {%- for variant in product.variants -%}
      "{{ variant.id }}": {
        {%- assign variant_prebuy_campaigns = variant.metafields.prebuy.campaigns.value -%}
        {%- assign variant_selected_campaign = null -%}
        {%- assign variant_market_compatible = false -%}
        
        {%- if variant_prebuy_campaigns and variant_prebuy_campaigns.size > 0 and current_market_config -%}
          {%- assign variant_best_priority = 999999 -%}
          {%- assign debug_locations_checked = '' -%}
          
          {%- for campaign in variant_prebuy_campaigns -%}
            {%- if campaign.locationId -%}
              {%- assign campaign_compatible = false -%}
              {%- assign campaign_priority = 999999 -%}
              
              {%- if current_market_config.locationPriorities -%}
                {%- for location_priority in current_market_config.locationPriorities -%}
                  {%- assign location_id_str = location_priority.locationId | append: '' -%}
                  {%- assign campaign_location_str = campaign.locationId | append: '' -%}
                  {%- assign debug_locations_checked = debug_locations_checked | append: location_id_str | append: '(' | append: location_priority.priority | append: '),' -%}
                  
                  {%- if location_id_str == campaign_location_str -%}
                    {%- assign campaign_compatible = true -%}
                    {%- assign campaign_priority = location_priority.priority | default: 999999 -%}
                    {%- break -%}
                  {%- endif -%}
                {%- endfor -%}
              {%- endif -%}
              
              {%- if campaign_compatible and campaign_priority < variant_best_priority -%}
                {%- assign variant_selected_campaign = campaign -%}
                {%- assign variant_market_compatible = true -%}
                {%- assign variant_best_priority = campaign_priority -%}
              {%- endif -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endif -%}
        
        {%- if variant_market_compatible -%}
          "enabled": true,
          "sellingPlanId": "{{ variant_selected_campaign.sellingPlanId | split: '/' | last }}",
          "productPageText": {{ variant_selected_campaign.productPageText | json }},
          "locationId": {{ variant_selected_campaign.locationId | json }},
          "priority": {{ variant_best_priority }},
          "marketCompatible": true,
          "selectedCampaign": {{ variant_selected_campaign | json }},
          "allCampaigns": {{ variant_prebuy_campaigns | json }}
        {%- else -%}
          "enabled": false,
          "marketCompatible": false,
          "allCampaigns": {{ variant_prebuy_campaigns | default: array | json }},
          "reason": {%- if variant_prebuy_campaigns.size == 0 -%}"no-campaigns"{%- else -%}"no-market-match"{%- endif -%},
          "debugInfo": {
            "currentMarketId": {{ current_market_id | json }},
            "currentMarketNumeric": {{ current_market_numeric | json }},
            "campaignCount": {{ variant_prebuy_campaigns.size | default: 0 }},
            "locationsChecked": {{ debug_locations_checked | default: 'none' | json }},
            "marketConfig": {{ current_market_config | json }},
            "allCampaigns": {{ variant_prebuy_campaigns | json }}
          }
        {%- endif -%}
      }{% unless forloop.last %},{% endunless %}
    {%- endfor -%}
  }
}
</script>

<script>
(function() {
  'use strict';
  
  // Only run once per page
  if (window.prebuySellingPlanInitialized) return;
  window.prebuySellingPlanInitialized = true;
  
  class PrebuySellingPlan {
    constructor() {
      this.init();
    }
    
    init() {
      const dataElements = document.querySelectorAll('.prebuy-variant-data');
      if (!dataElements.length) return;
      
      // Parse variant data with Markets support
      this.variantData = {};
      this.currentMarketId = null;
      
      dataElements.forEach(element => {
        try {
          const data = JSON.parse(element.textContent);
          this.currentMarketId = data.currentMarketId;
          this.currentMarketNumeric = data.currentMarketNumeric;
          this.marketPriorities = data.marketPriorities || [];
          Object.assign(this.variantData, data.variants || data);
          
          // Log market information for debugging
          console.log('🌍 Prebuy Markets Info (Priority-based Structure):', {
            currentMarket: data.currentMarketId,
            currentMarketNumeric: data.currentMarketNumeric,
            marketPriorities: this.marketPriorities,
            variantCount: Object.keys(data.variants || {}).length,
            enabledVariants: Object.values(data.variants || {}).filter(v => v.enabled).length,
            campaignStructure: 'priority-based',
            sampleVariantData: Object.values(data.variants || {})[0]
          });
          
        } catch (e) {
          console.warn('Failed to parse prebuy variant data:', e);
        }
      });
      
      this.setupListeners();
    }
    
    setupListeners() {
      // Method 1: Theme pubsub system (most themes)
      if (typeof subscribe === 'function' && typeof PUB_SUB_EVENTS !== 'undefined') {
        subscribe(PUB_SUB_EVENTS.variantChange, (event) => {
          this.updateSellingPlans(event.data.variant.id);
        });
      }
      
      // Method 2: DOM observation (fallback for any theme)
      const variantInputs = document.querySelectorAll('input[name="id"]');
      variantInputs.forEach(input => {
        const observer = new MutationObserver(() => this.updateSellingPlans(input.value));
        observer.observe(input, { attributes: true, attributeFilter: ['value'] });
        
        input.addEventListener('change', () => this.updateSellingPlans(input.value));
      });
      
      // Method 3: Form element changes (universal fallback)
      document.addEventListener('change', (e) => {
        if (e.target.name === 'id' || e.target.classList.contains('product-variant-id')) {
          this.updateSellingPlans(e.target.value);
        }
      });
    }
    
    updateSellingPlans(variantId) {
      const sellingPlanInputs = document.querySelectorAll('.prebuy-selling-plan');
      const locationPropertyInputs = document.querySelectorAll('.prebuy-location-property');
      const productTextElements = document.querySelectorAll('.prebuy-product-text');
      const buyButtons = document.querySelectorAll('.product-form__submit, button[name="add"], .pdp-info__add-to-cart');
      const variantData = this.variantData[variantId];
      
      // Log variant change for debugging
      console.log('🔄 Prebuy Variant Change (Priority-based Structure):', {
        variantId,
        currentMarket: this.currentMarketId,
        currentMarketNumeric: this.currentMarketNumeric,
        variantData: variantData || 'No data found',
        enabled: variantData?.enabled || false,
        marketCompatible: variantData?.marketCompatible || false,
        locationId: variantData?.locationId || null,
        priority: variantData?.priority || null,
        selectedCampaign: variantData?.selectedCampaign || null,
        allCampaigns: variantData?.allCampaigns || [],
        campaignCount: variantData?.allCampaigns?.length || 0,
        reason: variantData?.reason || 'unknown',
        debugInfo: variantData?.debugInfo || 'No debug info'
      });
      
      // Update selling plan inputs
      sellingPlanInputs.forEach(input => {
        if (variantData && variantData.enabled && variantData.marketCompatible) {
          input.value = variantData.sellingPlanId;
          input.removeAttribute('disabled');
          input.setAttribute('data-prebuy-enabled', 'true');
        } else {
          input.value = '';
          input.setAttribute('disabled', 'disabled');
          input.setAttribute('data-prebuy-enabled', 'false');
        }
      });
      
      // Update location property inputs
      locationPropertyInputs.forEach(input => {
        if (variantData && variantData.enabled && variantData.marketCompatible && variantData.locationId) {
          input.value = variantData.locationId;
          input.removeAttribute('disabled');
        } else {
          input.value = '';
          input.setAttribute('disabled', 'disabled');
        }
      });
      
      // Update product page text
      productTextElements.forEach(element => {
        const textElement = element.querySelector('.prebuy-text');
        if (variantData && variantData.enabled && variantData.marketCompatible && variantData.productPageText) {
          textElement.textContent = variantData.productPageText;
          element.style.display = 'block';
        } else {
          element.style.display = 'none';
        }
      });
      
      // Update buy button text (only if enabled)
      if (window.prebuyEnableButtonTextUpdates) {
        buyButtons.forEach(button => {
        const buttonTextSpan = button.querySelector('span');
        if (!buttonTextSpan) return;
        
        // Store original text if not already stored (but ignore preorder text)
        if (!button.dataset.originalText) {
          const currentText = buttonTextSpan.textContent.trim();
          // Don't store preorder text or translation missing as "original"
          if (!currentText.includes('Preorder') && !currentText.includes('Translation missing')) {
            button.dataset.originalText = currentText;
          } else {
            // Default to standard add to cart text if we can't get a clean original
            button.dataset.originalText = 'Add to cart';
          }
        }
        
        // Only update if this is an available variant (not sold out/unavailable)
        // Also check if the button text is already showing sold out/unavailable states
        const currentText = buttonTextSpan.textContent.trim().toLowerCase();
        const isSoldOutOrUnavailable = currentText.includes('sold') || 
                                       currentText.includes('unavailable') || 
                                       currentText.includes('out of stock');
        
        if (!button.disabled && !isSoldOutOrUnavailable) {
          if (variantData && variantData.enabled && variantData.marketCompatible) {
            // This is a preorder variant
            buttonTextSpan.textContent = 'Preorder Now';
          } else {
            // Regular variant - restore original text
            buttonTextSpan.textContent = button.dataset.originalText;
          }
        }
        // Don't update text for disabled buttons or buttons showing sold out states
        });
        
        // Handle accelerated checkout visibility for variant changes (only if enabled)
        if (window.prebuyEnableAcceleratedCheckoutControl) {
          const acceleratedCheckoutButtons = document.querySelectorAll('.shopify-payment-button, [data-shopify="payment-button"], .dynamic-checkout__content, .payment-button');
          if (variantData && variantData.enabled && variantData.marketCompatible) {
            // Hide accelerated checkout for preorder variants
            acceleratedCheckoutButtons.forEach(button => {
              button.style.display = 'none';
              button.setAttribute('data-prebuy-hidden', 'true');
            });
          } else {
            // Show accelerated checkout for regular variants
            acceleratedCheckoutButtons.forEach(button => {
              if (button.getAttribute('data-prebuy-hidden') === 'true') {
                button.style.display = '';
                button.removeAttribute('data-prebuy-hidden');
              }
            });
          }
        }
        
      }
    }
  }
  
  // Light-touch cart notification error fix for selling plans
  function patchCartNotification() {
    const cartNotification = document.querySelector('cart-notification');
    if (cartNotification && cartNotification.getSectionInnerHTML) {
      const originalGetSectionInnerHTML = cartNotification.getSectionInnerHTML.bind(cartNotification);
      cartNotification.getSectionInnerHTML = function(html, selector = '.shopify-section') {
        try {
          const element = new DOMParser().parseFromString(html, 'text/html').querySelector(selector);
          return element ? element.innerHTML : '';
        } catch (e) {
          console.warn('Prebuy: Cart notification section parsing failed, using fallback');
          return '';
        }
      };
    }
  }

  // Initialize when ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new PrebuySellingPlan();
      patchCartNotification();
    });
  } else {
    new PrebuySellingPlan();
    patchCartNotification();
  }
})();
</script>
{%- endunless -%}