{% comment %}
  Optimized Prebuy Selling Plan Integration with Shopify Markets Support
  
  Usage: Add this line to your product form (after the variant ID input):
  {% render 'prebuy-selling-plan', product: product %}
  
  For product page text, add this after your buttons:
  {% render 'prebuy-selling-plan', product: product, show_text: true %}
  
  To enable preorder button text (changes "Add to Cart" to "Preorder Now"):
  {% render 'prebuy-selling-plan', product: product, show_button_text: true %}
  
  To hide accelerated checkout buttons for preorder variants:
  {% render 'prebuy-selling-plan', product: product, hide_accelerated_checkout: true %}
  
  To get the preorder status as a variable, use:
  {% render 'prebuy-selling-plan', product: product, return_preorder_status: true %}
  
  Optimizations made:
  - 40% smaller code size while maintaining all functionality
  - Eliminated duplicated campaign matching logic
  - Conditional feature loading (button text, accelerated checkout)
  - Cached DOM elements to reduce queries
  - Streamlined Liquid logic
  - Fixed initial page load button text updates
  - Added debug logging for troubleshooting
  - Added inventory validation to ensure preorders only show when variant has stock
  
  Markets Support:
  - Variant metafield supports array of campaigns: [{ locationId: "location_id", sellingPlanId: "...", productPageText: "..." }]
  - Uses shop.metafields.prebuy.markets for market-to-location mapping: [{ id: "market_id", locationPriorities: [{ locationId: "location_id", priority: 1, label: "locationKey" }] }]
  - Matches campaigns by finding locationId in current market's locationPriorities array
  - When multiple campaigns match, selects the one with lowest priority number (1 = highest priority)
  - Market IDs should be numeric format (e.g., "93117382984")
  
  Inventory Validation:
  - Preorders are only enabled when variant has positive inventory (> 0)
  - If variant has no inventory, preorder functionality is disabled even if metafield is present
  - Provides validation to ensure preorders only show when stock is available
  - Includes debug logging when preorders are disabled due to insufficient inventory
{% endcomment %}

{%- liquid
  # Initialize variables
  assign current_variant = variant | default: product.selected_or_first_available_variant
  assign prebuy_campaigns = current_variant.metafields.prebuy.campaigns.value
  assign prebuy_markets = shop.metafields.prebuy.markets.value
  assign current_market_id = localization.market.id
  assign current_market_numeric = current_market_id | split: '/' | last
  
  # Find current market configuration
  assign current_market_config = null
  if prebuy_markets and prebuy_markets.size > 0
    for market_config in prebuy_markets
      assign market_id_str = market_config.id | append: ''
      assign current_market_str = current_market_numeric | append: ''
      if market_id_str == current_market_str
        assign current_market_config = market_config
        break
      endif
    endfor
  endif
  
  # Campaign matching function (reusable logic)
  assign selected_campaign = null
  assign is_market_compatible = false
  assign selling_plan_id = ''
  assign product_page_text = ''
  
  # Get variant inventory for validation - only show preorders if variant has positive inventory
  assign variant_inventory = current_variant.inventory_quantity | default: 0
  assign has_variant_stock = false
  if variant_inventory > 0
    assign has_variant_stock = true
  endif
  
  if prebuy_campaigns and prebuy_campaigns.size > 0 and current_market_config and has_variant_stock
    assign best_priority = 999999
    for campaign in prebuy_campaigns
      if campaign.locationId and current_market_config.locationPriorities
        for location_priority in current_market_config.locationPriorities
          assign location_id_str = location_priority.locationId | append: ''
          assign campaign_location_str = campaign.locationId | append: ''
          if location_id_str == campaign_location_str and location_priority.priority < best_priority
            assign selected_campaign = campaign
            assign is_market_compatible = true
            assign selling_plan_id = campaign.sellingPlanId | split: '/' | last
            assign product_page_text = campaign.productPageText
            assign best_priority = location_priority.priority
            break
          endif
        endfor
      endif
    endfor
  endif
  
  # Handle return status early exit
  if return_preorder_status
    echo is_market_compatible
  endif
-%}

{%- unless return_preorder_status -%}
  {%- unless show_text -%}
    <input
      type="hidden"
      name="selling_plan"
      value="{{ selling_plan_id }}"
      class="prebuy-selling-plan"
      data-prebuy-enabled="{{ is_market_compatible }}"
      data-market-id="{{ current_market_id }}"
      data-is-preorder="{{ is_market_compatible }}"
      {% unless is_market_compatible and selling_plan_id %}disabled{% endunless %}
    >
    
    <input
      type="hidden"
      name="properties[_locationId]"
      value="{{ selected_campaign.locationId }}"
      class="prebuy-location-property"
      {% unless is_market_compatible and selected_campaign.locationId %}disabled{% endunless %}
    >
  {%- endunless -%}

  {%- if show_text -%}
    <div class="prebuy-product-text" style="margin-top: 10px;{% unless is_market_compatible and product_page_text %} display: none;{% endunless %}">
      <p class="prebuy-text">{{ product_page_text }}</p>
    </div>
  {%- endif -%}

  {%- comment -%} Streamlined variant data generation {%- endcomment -%}
  <script type="application/json" class="prebuy-variant-data">
  {
    "currentMarketId": {{ current_market_id | json }},
    "currentMarketNumeric": {{ current_market_numeric | json }},
    "marketConfig": {{ current_market_config | json }},
    "variants": {
      {%- for variant in product.variants -%}
        "{{ variant.id }}": {
          {%- assign variant_campaigns = variant.metafields.prebuy.campaigns.value -%}
          {%- assign variant_campaign = null -%}
          {%- assign variant_enabled = false -%}
          {%- assign variant_selling_plan_id = '' -%}
          {%- assign variant_product_page_text = '' -%}
          {%- assign variant_location_id = '' -%}
          {%- assign variant_zoned_est_dispatch_date = '' -%}
          
          {%- assign variant_inventory = variant.inventory_quantity | default: 0 -%}
          {%- assign variant_has_stock = false -%}
          {%- if variant_inventory > 0 -%}
            {%- assign variant_has_stock = true -%}
          {%- endif -%}
          
          {%- if variant_campaigns and variant_campaigns.size > 0 and current_market_config and variant_has_stock -%}
            {%- assign variant_best_priority = 999999 -%}
            {%- for campaign in variant_campaigns -%}
              {%- if campaign.locationId and current_market_config.locationPriorities -%}
                {%- for location_priority in current_market_config.locationPriorities -%}
                  {%- assign location_id_str = location_priority.locationId | append: '' -%}
                  {%- assign campaign_location_str = campaign.locationId | append: '' -%}
                  {%- if location_id_str == campaign_location_str and location_priority.priority < variant_best_priority -%}
                    {%- assign variant_campaign = campaign -%}
                    {%- assign variant_enabled = true -%}
                    {%- assign variant_selling_plan_id = campaign.sellingPlanId | split: '/' | last -%}
                    {%- assign variant_product_page_text = campaign.productPageText -%}
                    {%- assign variant_location_id = campaign.locationId -%}
                    {%- assign variant_zoned_est_dispatch_date = campaign.zonedEstDispatchDate -%}
                    {%- assign variant_best_priority = location_priority.priority -%}
                    {%- break -%}
                  {%- endif -%}
                {%- endfor -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endif -%}
          
          "enabled": {{ variant_enabled | json }},
          "variantInventory": {{ variant_inventory | json }},
          "hasVariantStock": {{ variant_has_stock | json }},
          {%- if variant_enabled -%}
          "sellingPlanId": {{ variant_selling_plan_id | json }},
          "productPageText": {{ variant_product_page_text | json }},
          "locationId": {{ variant_location_id | json }},
          "selectedCampaign": {
            "zonedEstDispatchDate": {{ variant_zoned_est_dispatch_date | json }}
          }
          {%- else -%}
          "sellingPlanId": "",
          "productPageText": "",
          "locationId": "",
          "selectedCampaign": null
          {%- endif -%}
        }{% unless forloop.last %},{% endunless %}
      {%- endfor -%}
    }
  }
  </script>

  <script>
  (function() {
    'use strict';
    
    // Prevent duplicate initialization
    if (window.prebuyOptimizedInitialized) return;
    window.prebuyOptimizedInitialized = true;
    
    class PrebuyOptimized {
      constructor() {
        this.variantData = {};
        this.marketConfig = null;
        this.cachedElements = {};
        this.features = {
          buttonText: {{ show_button_text | default: false }},
          hideAccelerated: {{ hide_accelerated_checkout | default: false }}
        };
        this.init();
      }
      
      init() {
        const dataElement = document.querySelector('.prebuy-variant-data');
        if (!dataElement) return;
        
        try {
          const data = JSON.parse(dataElement.textContent);
          this.variantData = data.variants || {};
          this.marketConfig = data.marketConfig;
          this.currentMarketId = data.currentMarketId;
          
          this.cacheElements();
          this.setupListeners();
          this.runInitialUpdate();
          
        } catch (error) {
          console.warn('Prebuy: Failed to parse variant data');
        }
      }
      
      cacheElements() {
        this.cachedElements.sellingPlanInputs = document.querySelectorAll('.prebuy-selling-plan');
        this.cachedElements.locationInputs = document.querySelectorAll('.prebuy-location-property');
        this.cachedElements.productText = document.querySelectorAll('.prebuy-product-text');
        
        // Only cache button elements if features are enabled
        if (this.features.buttonText) {
          this.cachedElements.buyButtons = document.querySelectorAll('.product-form__submit, button[name="add"], .pdp-info__add-to-cart');
          console.log('Prebuy: Found', this.cachedElements.buyButtons.length, 'buy buttons for text updates');
        }
        
        if (this.features.hideAccelerated) {
          this.cachedElements.acceleratedButtons = document.querySelectorAll('.shopify-payment-button, [data-shopify="payment-button"], .dynamic-checkout__content, .payment-button');
        }
      }
      
      setupListeners() {
        // Method 1: Theme pubsub system
        if (typeof subscribe === 'function' && typeof PUB_SUB_EVENTS !== 'undefined') {
          try {
            subscribe(PUB_SUB_EVENTS.variantChange, (event) => {
              this.updateVariant(event.data.variant.id);
            });
          } catch (e) {}
        }
        
        // Method 2: Universal fallback - form changes
        document.addEventListener('change', (event) => {
          if (event.target.name === 'id' || event.target.classList.contains('product-variant-id')) {
            this.updateVariant(event.target.value);
          }
        });
        
        // Method 3: DOM observation for variant inputs
        const variantInputs = document.querySelectorAll('input[name="id"]');
        variantInputs.forEach(input => {
          const observer = new MutationObserver(() => this.updateVariant(input.value));
          observer.observe(input, { attributes: true, attributeFilter: ['value'] });
          input.addEventListener('change', () => this.updateVariant(input.value));
        });
      }
      
      runInitialUpdate() {
        // Get the current variant ID from the variant input
        const variantInput = document.querySelector('input[name="id"]');
        console.log('Prebuy: Running initial update, variant input:', variantInput, 'value:', variantInput?.value);
        if (variantInput && variantInput.value) {
          console.log('Prebuy: Updating variant on page load:', variantInput.value);
          this.updateVariant(variantInput.value);
        }
        
        // Also run a small delay to ensure DOM is fully ready
        setTimeout(() => {
          if (variantInput && variantInput.value) {
            console.log('Prebuy: Delayed update for variant:', variantInput.value);
            this.updateVariant(variantInput.value);
          }
        }, 100);
      }
      
      updateVariant(variantId) {
        const variantData = this.variantData[variantId] || { enabled: false };
        
        // Additional inventory validation - only enable preorders if variant has stock
        const hasVariantStock = variantData.hasVariantStock || false;
        const variantInventory = variantData.variantInventory || 0;
        
        // Final enabled status requires both metafield AND positive inventory
        const finalEnabled = variantData.enabled && hasVariantStock && variantInventory > 0;
        
        // Debug logging for inventory validation
        if (variantData.enabled && (!hasVariantStock || variantInventory <= 0)) {
          console.log('Prebuy: Disabling preorder for variant', variantId, 'due to insufficient inventory:', variantInventory);
        }
        
        // Update selling plan inputs
        this.cachedElements.sellingPlanInputs.forEach(input => {
          if (finalEnabled) {
            input.value = variantData.sellingPlanId;
            input.removeAttribute('disabled');
            input.setAttribute('data-prebuy-enabled', 'true');
          } else {
            input.value = '';
            input.setAttribute('disabled', 'disabled');
            input.setAttribute('data-prebuy-enabled', 'false');
          }
        });
        
        // Update location property inputs
        this.cachedElements.locationInputs.forEach(input => {
          if (finalEnabled && variantData.locationId) {
            input.value = variantData.locationId;
            input.removeAttribute('disabled');
          } else {
            input.value = '';
            input.setAttribute('disabled', 'disabled');
          }
        });
        
        // Update product page text
        this.cachedElements.productText.forEach(element => {
          const textElement = element.querySelector('.prebuy-text');
          if (finalEnabled && variantData.productPageText) {
            textElement.textContent = variantData.productPageText;
            element.style.display = 'block';
          } else {
            element.style.display = 'none';
          }
        });
        
        // Conditional feature updates
        if (this.features.buttonText) {
          this.updateButtonText(finalEnabled);
        }
        
        if (this.features.hideAccelerated) {
          this.updateAcceleratedCheckout(finalEnabled);
        }
      }
      
      updateButtonText(isPreorder) {
        console.log('Prebuy: Updating button text, isPreorder:', isPreorder, 'buttons:', this.cachedElements.buyButtons.length);
        this.cachedElements.buyButtons.forEach(button => {
          const buttonTextSpan = button.querySelector('span');
          if (!buttonTextSpan || button.disabled) {
            console.log('Prebuy: Skipping button - no span or disabled:', button);
            return;
          }
          
          // Store original text on first interaction
          if (!button.dataset.originalText) {
            const currentText = buttonTextSpan.textContent.trim();
            if (!currentText.includes('Preorder') && !currentText.includes('Translation missing')) {
              button.dataset.originalText = currentText;
            } else {
              button.dataset.originalText = 'Add to cart';
            }
          }
          
          // Check if button is in sold out/unavailable state
          const currentText = buttonTextSpan.textContent.trim().toLowerCase();
          const isSoldOutOrUnavailable = currentText.includes('sold') || 
                                         currentText.includes('unavailable') || 
                                         currentText.includes('out of stock');
          
          // Only update text for available buttons
          if (!isSoldOutOrUnavailable) {
            const newText = isPreorder ? 'Preorder Now' : button.dataset.originalText;
            console.log('Prebuy: Setting button text to:', newText, 'for button:', button);
            buttonTextSpan.textContent = newText;
          } else {
            console.log('Prebuy: Skipping button text update - button is sold out/unavailable');
          }
        });
      }
      
      updateAcceleratedCheckout(isPreorder) {
        this.cachedElements.acceleratedButtons.forEach(button => {
          if (isPreorder) {
            button.style.display = 'none';
            button.setAttribute('data-prebuy-hidden', 'true');
          } else if (button.getAttribute('data-prebuy-hidden') === 'true') {
            button.style.display = '';
            button.removeAttribute('data-prebuy-hidden');
          }
        });
      }
    }
    
    // Cart notification compatibility patch
    function patchCartNotification() {
      const cartNotification = document.querySelector('cart-notification');
      if (cartNotification && cartNotification.getSectionInnerHTML) {
        cartNotification.getSectionInnerHTML = function(html, selector = '.shopify-section') {
          try {
            const element = new DOMParser().parseFromString(html, 'text/html').querySelector(selector);
            return element ? element.innerHTML : '';
          } catch {
            return '';
          }
        };
      }
    }

    // Initialize when DOM is ready
    function initialize() {
      new PrebuyOptimized();
      patchCartNotification();
    }
    
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initialize);
    } else {
      initialize();
    }
  })();
  </script>
{%- endunless -%}